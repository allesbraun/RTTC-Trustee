num_if,num_else,num_switch,num_loop,num_break,num_Priority,num_binSearch,num_minMax,num_sort,num_hash_map,num_hash_set,num_recursive,num_nested_loop,num_vari,num_method,num_state,complexity_class,efficiency,filename
2,1,0,0,0,0,0,1,0,0,0,3,0,4,3,6,exponential,inefficient,0-1-knapsack-problem-dp-10-1.java
3,1,0,2,0,0,0,1,0,0,0,3,2,7,4,11,quadratic,inefficient,0-1-knapsack-problem-dp-10-2.java
2,1,0,2,0,0,0,1,0,0,0,0,2,6,3,8,quadratic,inefficient,0-1-knapsack-problem-dp-10-3.java
1,0,0,2,0,0,0,1,0,0,0,0,2,7,2,6,quadratic,inefficient,0-1-knapsack-problem-dp-10-4.java
4,0,0,8,0,1,0,0,0,0,0,1,2,17,8,27,exponential,inefficient,8-puzzle-problem-using-branch-and-bound-1.java
6,0,0,10,0,0,0,0,0,0,0,0,6,10,2,32,polynomial,inefficient,a-boolean-matrix-question-1.java
2,0,0,8,0,0,0,0,0,0,0,0,2,5,3,14,quadratic,inefficient,a-boolean-matrix-question-2.java
6,0,0,8,0,0,0,0,0,0,0,0,2,11,3,18,quadratic,inefficient,a-boolean-matrix-question-3.java
7,1,0,0,0,0,0,4,0,0,0,2,0,8,5,25,quadratic,inefficient,a-program-to-check-if-a-binary-tree-is-bst-or-not-1.java
3,1,0,0,0,0,0,0,0,0,0,2,0,1,3,7,linear,efficient,a-program-to-check-if-a-binary-tree-is-bst-or-not-2.java
4,1,0,0,0,0,0,0,0,0,0,2,0,1,3,10,linear,efficient,a-program-to-check-if-a-binary-tree-is-bst-or-not-3.java
5,3,0,2,0,0,0,0,0,0,0,0,2,4,2,15,linear,efficient,a-program-to-check-if-a-binary-tree-is-bst-or-not-4.java
1,0,0,1,0,0,0,0,0,0,0,0,0,4,2,4,linear,efficient,activity-selection-problem-greedy-algo-1.java
1,0,0,1,0,0,0,0,1,0,0,0,0,5,4,5,linearithmic,efficient,activity-selection-problem-greedy-algo-2.java
1,0,0,3,0,1,0,0,0,0,0,0,0,10,2,8,linearithmic,efficient,activity-selection-problem-greedy-algo-3.java
6,0,0,11,0,0,0,0,0,0,0,0,2,21,4,30,linear,efficient,aho-corasick-algorithm-pattern-searching-1.java
0,0,0,4,0,0,0,0,0,0,0,0,0,9,3,8,linear,efficient,array-rotation-1.java
0,0,0,3,0,0,0,0,0,0,0,0,2,7,2,6,quadratic,inefficient,array-rotation-2.java
3,1,0,3,1,0,0,0,0,0,0,1,2,5,4,11,linear,efficient,array_rotation-3.java
0,0,0,2,0,0,0,0,0,0,0,0,0,6,1,4,quadratic,inefficient,array-rotation-4.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,3,4,linear,efficient,average-of-a-stream-of-numbers-1.java
21,4,0,1,0,0,0,6,0,0,0,2,0,11,11,57,linear,efficient,avl-with-duplicate-keys-1.java
8,1,0,2,0,0,0,0,0,0,0,1,0,7,13,31,linearithmic,efficient,binary-heap-1.java
0,0,0,4,0,0,0,0,0,0,0,0,0,6,4,7,linearithmic,efficient,binary-indexed-tree-or-fenwick-tree-2-1.java
0,0,0,3,0,0,0,0,0,0,0,0,0,7,7,9,linearithmic,efficient,binary-indexed-tree-range-update-range-queries-1.java
1,0,0,1,0,0,0,0,0,0,0,0,0,6,3,3,quadratic,inefficient,binary-indexed-tree-range-updates-point-queries-1.java
0,0,0,4,0,0,0,0,0,0,0,0,0,7,5,7,linearithmic,efficient,binary-indexed-tree-range-updates-point-queries-2.java
7,2,0,0,0,0,0,0,0,0,0,2,0,2,3,13,linear,efficient,binary-search-tree-set-1-search-and-insertion-1.java
5,0,0,0,0,0,0,0,1,0,0,2,0,4,7,12,linearithmic,efficient,binary-tree-to-binary-search-tree-conversion-1.java
3,0,0,0,0,0,0,0,1,0,0,2,0,5,5,11,linearithmic,efficient,binary-tree-to-binary-search-tree-conversion-2.java
4,0,0,3,0,0,0,0,0,0,0,0,0,7,2,13,linear,efficient,bipartite-graph-1.java
6,0,0,4,0,0,0,0,0,0,0,0,0,7,3,18,linear,efficient,bipartite-graph-2.java
4,0,0,4,0,0,0,0,0,0,0,0,3,11,2,16,linear,efficient,bipartite-graph-3.java
6,0,0,2,0,0,0,0,0,0,0,1,0,6,3,15,linear,efficient,bipartite-graph-4.java
3,1,0,2,0,0,0,0,0,0,0,2,0,3,5,11,linear,efficient,block-swap-algorithm-for-array-rotation-1.java
3,1,0,3,0,0,0,0,0,0,0,0,0,4,4,11,linear,efficient,block-swap-algorithm-for-array-rotation-2.java
3,0,0,5,0,0,0,0,0,0,0,1,2,8,4,10,polynomial,inefficient,boggle-find-possible-words-board-characters-1.java
4,0,0,4,0,0,0,0,0,0,2,8,3,20,3,20,polynomial,inefficient,boggle-find-possible-words-board-characters-2.java
1,0,0,3,0,0,0,0,0,0,0,0,0,6,3,7,linear,efficient,breadth-first-search-or-bfs-for-a-graph-1.java
5,1,0,3,0,1,0,0,0,0,0,2,2,11,6,17,linear,efficient,cartesian-tree-sorting-1.java
4,1,0,3,0,0,0,0,0,0,0,2,2,10,5,16,quadratic,inefficient,cartesian-tree-1.java
6,1,1,1,3,0,0,0,0,0,0,0,0,5,2,19,linear,efficient,check-for-balanced-parentheses-in-an-expression-1.java
3,3,0,1,0,0,0,0,0,0,0,0,0,4,2,8,linear,efficient,check-for-balanced-parentheses-in-an-expression-2.java
2,1,0,2,0,0,0,0,0,0,0,0,2,5,2,11,quadratic,inefficient,check-given-array-contains-duplicate-elements-within-k-distance-1.java
3,1,0,1,0,0,0,0,0,0,1,0,0,3,2,7,linear,efficient,check-given-array-contains-duplicate-elements-within-k-distance-2.java
4,0,0,0,0,0,0,0,0,0,0,0,0,4,3,13,constant,efficient,check-given-four-points-form-square-1.java
6,1,0,0,0,0,0,0,0,0,0,2,0,1,3,13,quadratic,inefficient,check-if-a-binary-tree-is-subtree-of-another-binary-tree-1.java
2,1,0,2,0,0,0,0,0,0,0,0,2,5,2,11,quadratic,inefficient,check-if-pair-with-given-sum-exists-in-array-1.java
3,2,0,1,0,0,0,0,1,0,0,0,0,4,2,7,linearithmic,efficient,check-if-pair-with-given-sum-exists-in-array-2.java
4,2,0,2,0,0,1,0,1,0,0,0,0,7,3,13,linearithmic,efficient,check-if-pair-with-given-sum-exists-in-array-3.java
1,0,0,1,0,0,0,0,0,0,1,0,0,5,2,5,linear,efficient,check-if-pair-with-given-sum-exists-in-array-4.java
6,3,0,3,1,0,0,0,0,0,0,0,0,5,2,15,linear,efficient,check-if-pair-with-given-sum-exists-in-array-5.java
10,0,0,0,0,0,0,4,0,0,0,0,0,9,4,20,constant,efficient,check-if-two-given-line-segments-intersect-1.java
8,2,0,3,1,0,0,0,0,0,0,0,0,6,4,27,linear,efficient,circular-linked-list-1.java
14,4,1,0,2,0,0,0,0,1,0,2,0,6,8,37,linear,efficient,clone-binary-tree-random-pointers-1.java
4,0,0,5,0,0,0,2,2,0,0,1,2,17,8,26,linearithmic,efficient,closest-pair-of-points-using-divide-and-conquer-algorithm-1.java
3,0,0,0,0,0,0,0,0,0,0,2,0,2,2,7,exponential,inefficient,coin-change-dp-7-1.java
0,0,0,2,0,0,0,0,0,0,0,0,2,6,2,3,polynomial,inefficient,coin-change-dp-7-2.java
4,0,0,2,0,0,0,0,0,0,0,3,0,6,2,13,polynomial,inefficient,coin-change-dp-7-3.java
3,0,0,2,0,0,0,0,0,0,0,0,2,10,2,7,linear,efficient,connect-nodes-at-same-level-1.java
3,0,0,0,0,0,0,0,0,0,0,2,0,1,3,4,linear,efficient,connect-nodes-at-same-level-2.java
4,0,0,1,0,0,0,0,0,0,0,2,0,8,4,12,quadratic,inefficient,construct-tree-from-given-inorder-and-preorder-traversal-1.java
3,0,0,1,0,0,0,0,0,1,0,2,0,7,4,13,linear,efficient,construct-tree-from-given-inorder-and-preorder-traversal-2.java
5,1,0,2,0,0,0,0,0,0,1,2,2,8,3,18,linear,efficient,construct-tree-from-given-inorder-and-preorder-traversal-3.java
4,1,1,4,0,0,0,0,0,0,0,0,3,5,3,21,linear,efficient,convert-infix-expression-to-postfix-expression-1.java
4,0,0,3,0,0,0,0,0,0,0,0,0,9,3,13,quadratic,inefficient,convex-hull-using-jarvis-algorithm-or-wrapping-1.java
2,0,0,2,0,0,0,0,0,0,0,0,2,6,2,8,quadratic,inefficient,count-number-islands-every-island-separated-line-1.java
1,0,0,1,0,0,0,0,0,0,0,0,0,3,2,4,logarithmic,efficient,count-trailing-zeroes-factorial-number-1.java
0,0,0,2,0,0,0,0,0,0,0,0,2,4,2,5,logarithmic,efficient,count-trailing-zeroes-factorial-number-2.java
2,0,0,7,0,0,0,0,0,0,0,0,5,5,2,13,quadratic,inefficient,create-a-matrix-with-alternating-rectangles-of-0-and-x-1.java
5,0,0,1,0,0,0,0,0,0,0,0,0,3,4,13,constant,efficient,delete-a-node-in-a-doubly-linked-list-1.java
21,5,0,1,0,0,0,6,0,0,0,2,0,10,10,53,logarithmic,efficient,deletion-in-an-avl-tree-1.java
10,2,0,1,0,0,0,0,0,0,0,2,0,5,4,26,linear,efficient,deletion-in-binary-search-tree-1.java
52,27,0,3,3,0,0,0,0,0,0,2,0,17,23,115,logarithmic,efficient,deletion-in-red-black-tree-1.java
1,0,0,2,0,0,0,0,0,0,0,1,0,5,4,4,linear,efficient,depth-first-search-or-dfs-for-a-graph-1.java
2,2,0,0,0,0,0,0,0,0,0,2,0,4,4,6,constant,efficient,design-and-implement-special-stack-data-structure-1.java
3,1,0,2,0,0,0,0,0,0,0,1,0,5,5,12,constant,efficient,design-and-implement-special-stack-data-structure-3.java
5,1,0,3,0,0,0,0,0,0,0,1,0,7,4,14,linear,efficient,detect-cycle-in-a-graph-1.java
3,1,0,6,0,0,0,0,0,0,0,0,2,10,3,20,linear,efficient,detect-cycle-in-a-graph-2.java
1,1,0,0,0,0,0,0,0,0,0,0,0,1,2,2,constant,efficient,detect-if-two-integers-have-opposite-signs-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,constant,efficient,detect-if-two-integers-have-opposite-signs-2.java
0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,constant,efficient,detect-if-two-integers-have-opposite-signs-3.java
1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,constant,efficient,detect-if-two-integers-have-opposite-signs-4.java
2,0,0,0,0,0,0,3,0,0,0,2,0,5,4,7,quadratic,inefficient,diameter-of-a-binary-tree-1.java
2,0,0,0,0,0,0,4,0,0,0,2,0,5,4,8,linear,efficient,diameter-of-a-binary-tree-2.java
2,2,0,4,0,0,0,1,0,0,0,0,4,8,3,16,linear,efficient,diameter-of-a-binary-tree-3.java
3,1,0,2,0,0,0,0,0,0,0,0,0,6,5,16,constant,efficient,efficiently-implement-k-queues-single-array-1.java
2,0,0,2,0,0,0,0,0,0,0,0,0,6,5,11,linear,efficient,efficiently-implement-k-stacks-single-array-1.java
1,1,1,1,4,0,0,0,0,0,0,0,0,6,2,10,linear,efficient,evaluation-of-postfix-expression-1.java
2,1,1,2,4,0,0,0,0,0,0,0,2,7,2,15,linear,efficient,evaluation-of-postfix-expression-2.java
0,0,0,1,0,0,0,0,0,0,0,0,0,3,2,2,linear,efficient,expected-number-of-trials-before-success-1.java
3,1,0,1,0,0,0,0,0,0,0,2,0,5,4,12,linear,efficient,expression-tree-1.java
8,1,0,1,0,0,0,0,0,0,0,2,0,4,5,19,polynomial,inefficient,find-a-pair-with-given-sum-in-bst-1.java
8,0,0,1,0,0,0,0,0,0,0,2,0,5,7,21,linear,efficient,find-a-pair-with-given-sum-in-bst-2.java
11,4,0,3,0,0,0,0,0,0,0,0,3,9,8,33,linear,efficient,find-a-pair-with-given-sum-in-bst-3.java
1,0,0,2,0,0,0,0,0,0,0,0,2,5,2,7,linear,efficient,find-a-tour-that-visits-all-stations-1.java
5,1,0,4,2,0,0,0,0,0,0,0,2,8,2,24,linear,efficient,find-a-tour-that-visits-all-stations-2.java
2,1,0,1,0,0,0,0,0,0,0,0,0,6,2,6,linear,efficient,find-a-tour-that-visits-all-stations-3.java
7,1,0,4,0,0,0,0,0,0,0,0,0,12,2,25,linear,efficient,find-a-tour-that-visits-all-stations-4.java
5,2,0,4,0,0,0,0,0,0,0,0,3,6,2,16,quadratic,inefficient,find-common-element-rows-row-wise-sorted-matrix-1.java
5,3,0,3,0,0,0,0,0,1,0,0,2,5,2,17,quadratic,inefficient,find-common-element-rows-row-wise-sorted-matrix-2.java
2,0,0,3,1,0,0,0,0,2,0,0,0,6,2,11,linear,efficient,find-itinerary-from-a-given-list-of-tickets-1.java
7,1,0,1,0,0,0,0,0,0,0,2,0,6,4,14,linear,efficient,find-k-th-smallest-element-in-bst-order-statistics-in-bst-1.java
4,0,0,1,0,0,0,0,1,0,0,2,0,5,3,9,linearithmic,efficient,find-k-th-smallest-element-in-bst-order-statistics-in-bst-2.java
7,1,0,1,0,0,0,0,0,0,0,2,0,6,3,15,linear,efficient,find-k-th-smallest-element-in-bst-order-statistics-in-bst-3.java
5,1,0,3,0,0,0,0,0,0,0,2,2,6,3,14,linear,efficient,find-k-th-smallest-element-in-bst-order-statistics-in-bst-4.java
5,1,0,8,0,0,0,0,0,0,0,1,2,16,6,20,linear,efficient,find-longest-path-directed-acyclic-graph-1.java
4,1,0,3,0,0,0,0,0,3,0,1,0,10,3,14,linearithmic,efficient,find-number-of-employees-under-every-manager-1.java
2,2,0,0,0,0,0,0,0,0,0,2,0,3,2,6,linear,efficient,find-the-maximum-depth-or-height-of-a-tree-1.java
5,0,0,1,0,0,0,0,0,0,0,0,0,5,3,14,linear,efficient,find-the-maximum-depth-or-height-of-a-tree-2.java
2,0,0,2,0,0,0,0,0,0,0,2,2,7,3,10,linear,efficient,find-the-maximum-depth-or-height-of-a-tree-3.java
3,2,0,0,0,0,0,0,0,0,0,2,0,2,3,11,linear,efficient,find-the-minimum-element-in-a-binary-search-tree-1.java
2,2,0,1,0,0,0,0,0,0,0,2,0,3,3,11,linear,efficient,find-the-minimum-element-in-a-binary-search-tree-2.java
2,1,0,1,0,0,0,0,0,0,0,0,0,2,2,9,logarithmic,efficient,find-the-minimum-element-in-a-binary-search-tree-3.java
1,0,0,3,0,0,0,0,0,0,0,0,0,5,2,7,linear,efficient,find-the-missing-number-1.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,2,2,linear,efficient,find-the-missing-number-2.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,2,3,linear,efficient,find-the-missing-number-3.java
0,0,0,2,0,0,0,0,0,0,0,0,0,7,2,3,linear,efficient,find-the-missing-number-4.java
2,1,0,2,0,0,0,0,0,0,0,0,0,7,3,11,linear,efficient,find-the-missing-number-5.java
2,0,0,2,0,0,0,0,0,0,0,0,0,5,2,8,linear,efficient,find-the-missing-number-6.java
2,0,0,2,0,0,0,0,0,0,0,0,2,5,2,8,quadratic,inefficient,find-the-number-occurring-odd-number-of-times-1.java
2,1,0,2,0,0,0,0,0,1,0,0,0,6,2,9,linear,efficient,find-the-number-occurring-odd-number-of-times-2.java
0,0,0,1,0,0,0,0,0,0,0,0,0,5,2,3,linear,efficient,find-the-number-occurring-odd-number-of-times-3.java
2,1,0,2,0,0,0,0,0,1,0,0,0,4,1,10,linear,efficient,find-the-number-occurring-odd-number-of-times-4.java
1,1,0,2,1,0,0,0,0,0,1,0,0,6,2,9,linear,efficient,find-the-number-occurring-odd-number-of-times-5.java
1,0,0,1,0,0,1,0,1,0,0,0,0,7,2,5,linearithmic,efficient,find-the-number-occurring-odd-number-of-times-6.java
3,1,0,2,1,0,0,0,0,0,0,0,2,6,2,9,quadratic,inefficient,find-whether-an-array-is-subset-of-another-array-set-1-1.java
7,2,0,2,0,0,1,0,3,0,0,2,0,12,5,21,linearithmic,efficient,find-whether-an-array-is-subset-of-another-array-set-1-2.java
6,2,0,1,0,0,0,0,2,0,0,0,0,5,2,13,linearithmic,efficient,find-whether-an-array-is-subset-of-another-array-set-1-3.java
3,1,0,2,0,0,0,0,0,0,1,0,0,7,2,9,linear,efficient,find-whether-an-array-is-subset-of-another-array-set-1-4.java
1,1,0,2,0,0,0,0,0,0,1,0,0,8,1,7,linear,efficient,find-whether-an-array-is-subset-of-another-array-set-1-5.java
2,2,0,2,0,0,0,0,0,1,0,0,0,7,2,9,linear,efficient,find-whether-an-array-is-subset-of-another-array-set-1-6.java
3,0,0,0,0,0,0,0,1,0,0,2,0,3,5,6,linearithmic,efficient,fix-two-swapped-nodes-of-bst-1.java
6,1,0,0,0,0,0,0,0,0,0,2,0,4,4,12,linear,efficient,fix-two-swapped-nodes-of-bst-2.java
3,0,0,1,0,0,0,0,0,0,0,2,0,3,2,12,logarithmic,efficient,floor-and-ceil-from-a-bst-1.java
3,1,0,1,0,0,0,0,0,0,0,2,0,3,2,13,logarithmic,efficient,floor-and-ceil-from-a-bst-2.java
2,1,0,2,0,0,0,0,0,0,0,0,0,2,3,11,logarithmic,efficient,floor-and-ceil-from-a-bst-3.java
1,1,0,2,0,0,0,0,0,0,0,0,0,2,2,9,quadratic,inefficient,given-a-number-find-next-smallest-palindrome-larger-than-this-number-1.java
5,1,0,6,0,0,0,0,0,0,0,0,0,9,5,21,linear,efficient,given-a-number-find-next-smallest-palindrome-larger-than-this-number-2.java
5,2,0,4,0,0,0,0,1,0,0,1,0,9,4,18,quadratic,inefficient,given-a-sequence-of-words-print-all-anagrams-together-set-2-1.java
1,0,0,4,0,0,0,0,0,0,0,0,4,7,2,8,polynomial,inefficient,given-n-x-n-square-matrix-find-sum-sub-squares-size-k-x-k-1.java
1,0,0,6,0,0,0,0,0,0,0,0,3,11,2,12,quadratic,inefficient,given-n-x-n-square-matrix-find-sum-sub-squares-size-k-x-k-2.java
7,1,0,4,0,0,0,0,0,0,0,1,0,7,5,24,exponential,inefficient,hamiltonian-cycle-1.java
3,0,0,3,0,0,0,0,1,0,0,1,0,13,4,8,linearithmic,efficient,heap-sort-1.java
12,1,0,0,0,0,0,4,0,0,0,0,0,13,5,29,linear,efficient,how-to-check-if-a-given-point-lies-inside-a-polygon-1.java
1,0,0,2,0,1,0,0,0,0,0,2,0,11,3,8,linearithmic,efficient,huffman-coding-greedy-algo-3-1.java
2,0,0,1,0,0,0,0,0,0,0,1,0,2,5,8,linear,efficient,implement-stack-using-queue-1.java
2,0,0,2,0,0,0,0,0,0,0,1,0,4,5,10,constant,efficient,implement-stack-using-queue-2.java
2,0,0,1,0,0,0,0,0,0,0,1,0,3,5,8,linear,efficient,implement-stack-using-queue-3.java
3,0,0,0,0,0,0,0,0,0,0,1,0,1,5,8,linear,efficient,implement-stack-using-queue-4.java
4,4,0,0,0,0,0,0,0,0,0,0,0,3,5,18,constant,efficient,implement-two-stacks-in-an-array-1.java
4,4,0,0,0,0,0,0,0,0,0,0,0,3,5,16,constant,efficient,implement-two-stacks-in-an-array-2.java
14,4,0,0,0,0,0,0,0,0,0,0,0,1,9,34,linear,efficient,implementation-deque-using-circular-array-1.java
7,1,0,2,0,1,0,0,1,0,0,0,0,12,3,16,linearithmic,efficient,implementation-of-0-1-knapsack-using-branch-and-bound-1.java
3,0,0,2,0,0,0,0,0,0,0,2,0,9,7,12,linear,efficient,in-place-conversion-of-sorted-dll-to-balanced-bst-1.java
4,0,0,2,0,0,0,0,0,0,0,2,0,7,6,13,linear,efficient,in-place-conversion-of-sorted-dll-to-balanced-bst-2.java
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,linear,efficient,inorder-predecessor-successor-given-key-bst-1.java
9,4,0,2,0,0,0,0,0,0,0,2,0,4,3,20,linear,efficient,inorder-predecessor-successor-given-key-bst-2.java
6,0,0,0,0,0,0,0,0,0,0,2,0,2,3,10,linear,efficient,inorder-predecessor-successor-given-key-bst-3.java
9,4,0,2,0,0,0,0,0,0,0,2,0,3,3,30,linear,efficient,inorder-predecessor-successor-given-key-bst-4.java
4,3,0,2,0,0,0,0,0,0,0,2,0,5,4,20,linear,efficient,inorder-successor-in-binary-search-tree-1.java
6,4,0,2,1,0,0,0,0,0,0,2,0,5,5,21,linear,efficient,inorder-successor-in-binary-search-tree-2.java
6,3,0,0,0,0,0,0,0,0,0,2,0,4,6,19,linear,efficient,inorder-successor-in-binary-search-tree-3.java
3,2,0,2,0,0,0,0,0,0,0,0,2,2,2,11,linear,efficient,inorder-tree-traversal-without-recursion-and-without-stack-1.java
1,0,0,2,0,0,0,0,0,0,0,0,2,3,2,6,linear,efficient,inorder-tree-traversal-without-recursion-1.java
2,2,0,2,0,0,0,0,0,0,0,0,2,3,2,9,linear,efficient,inorder-tree-traversal-without-recursion-2.java
0,0,0,5,0,0,0,0,0,0,0,0,2,13,3,11,quadratic,inefficient,inplace-m-x-n-size-matrix-transpose-1.java
0,0,0,5,0,0,0,0,0,0,0,0,2,15,6,9,linear,efficient,inplace-m-x-n-size-matrix-transpose-2.java
10,1,0,0,0,0,0,5,0,0,0,2,0,6,8,27,linearithmic,efficient,insertion-in-an-avl-tree-1.java
25,5,0,2,0,0,0,0,0,0,0,2,0,9,9,51,logarithmic,efficient,insertion-in-red-black-tree-1.java
1,1,0,2,0,0,0,0,0,0,0,0,2,4,2,7,linearithmic,efficient,interesting-method-generate-binary-numbers-1-n-1.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,2,2,linear,efficient,interesting-method-generate-binary-numbers-1-n-2.java
7,2,0,0,0,0,0,0,0,0,0,2,0,2,6,25,quadratic,inefficient,interval-tree-1.java
2,1,0,1,0,0,0,1,0,0,0,2,0,5,2,5,quadratic,inefficient,interval-tree-2.java
4,0,0,0,0,0,0,0,0,0,0,1,0,2,7,13,constant,efficient,introduction-and-array-implementation-of-queue-1.java
6,1,0,2,0,0,0,0,0,0,0,1,0,2,4,15,linear,efficient,introduction-of-b-tree-2-2.java
1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,5,linear,efficient,introduction-to-disjoint-set-data-structure-or-union-find-algorithm-1.java
1,0,0,2,0,0,0,0,0,0,0,0,2,3,2,4,quadratic,inefficient,inversion-count-in-array-using-merge-sort-1.java
2,1,0,3,0,0,0,0,0,0,0,2,0,6,3,10,linearithmic,efficient,inversion-count-in-array-using-merge-sort-2.java
5,1,0,3,0,1,1,0,1,0,0,0,0,11,3,21,linearithmic,efficient,inversion-count-in-array-using-merge-sort-3.java
1,0,0,3,1,0,0,1,1,0,0,0,2,8,2,8,quadratic,inefficient,job-sequencing-problem-1.java
1,1,0,3,0,1,0,0,2,0,0,0,2,8,2,12,linearithmic,efficient,job-sequencing-problem-2.java
3,1,0,2,0,0,0,0,0,0,0,2,0,9,4,9,quadratic,inefficient,k-largestor-smallest-elements-in-an-array-3.java
1,0,0,2,0,1,0,0,0,0,0,0,0,5,2,6,linearithmic,efficient,k-largestor-smallest-elements-in-an-array-4.java
6,3,0,2,0,0,0,0,0,0,0,0,0,9,3,17,linear,efficient,kmp-algorithm-for-pattern-searching-1.java
2,0,0,1,0,0,0,0,0,0,0,0,0,4,2,5,linear,efficient,largest-sum-contiguous-subarray-1.java
2,0,0,1,0,0,0,0,0,0,0,0,0,4,2,6,linear,efficient,largest-sum-contiguous-subarray-2.java
2,0,0,2,1,0,0,0,0,0,0,0,2,5,2,7,quadratic,inefficient,leaders-in-an-array-1.java
1,0,0,1,0,0,0,0,0,0,0,0,0,5,2,4,linear,efficient,leaders-in-an-array-2.java
1,0,0,2,0,0,0,0,0,0,0,0,0,5,2,6,linear,efficient,leaders-in-an-array-3.java
5,2,0,1,0,0,0,0,0,0,0,2,0,5,4,12,quadratic,inefficient,level-order-tree-traversal-1.java
2,0,0,1,0,0,0,0,0,0,0,0,0,3,2,6,linear,efficient,level-order-tree-traversal-2.java
0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,constant,efficient,little-and-big-endian-mystery-3.java
2,1,0,0,0,0,0,1,0,0,0,3,0,5,3,6,exponential,inefficient,longest-common-subsequence-dp-4-1.java
3,0,0,2,0,0,0,1,0,0,0,3,2,7,2,12,quadratic,inefficient,longest-common-subsequence-dp-4-2.java
2,1,0,2,0,0,0,1,0,0,0,0,2,8,3,8,quadratic,inefficient,longest-common-subsequence-dp-4-3.java
1,1,0,2,0,0,0,1,0,0,0,0,2,8,2,6,quadratic,inefficient,longest-common-subsequence-dp-4-4.java
3,0,0,1,0,0,0,0,0,0,0,1,0,4,3,8,exponential,inefficient,longest-increasing-subsequence-dp-3-1.java
3,0,0,1,0,0,0,1,0,0,0,2,0,6,3,11,quadratic,inefficient,longest-increasing-subsequence-dp-3-2.java
2,0,0,4,0,0,0,0,0,0,0,7,2,4,2,7,quadratic,inefficient,longest-increasing-subsequence-dp-3-3.java
3,0,0,0,0,0,0,1,0,0,0,3,0,2,3,11,exponential,inefficient,longest-palindromic-subsequence-dp-12-1.java
4,0,0,1,0,0,0,1,0,0,0,3,0,4,3,15,quadratic,inefficient,longest-palindromic-subsequence-dp-12-2.java
1,1,0,2,0,0,0,1,0,0,0,0,2,5,2,6,quadratic,inefficient,longest-palindromic-subsequence-dp-12-3.java
2,1,0,3,0,0,0,0,0,0,0,2,0,5,2,11,linearithmic,efficient,lower-bound-on-comparison-based-sorting-algorithms-1.java
3,0,0,0,0,0,0,0,0,0,0,2,0,3,2,7,linear,efficient,lowest-common-ancestor-in-a-binary-search-tree-1.java
2,1,0,1,1,0,0,0,0,0,0,0,0,3,2,6,linear,efficient,lowest-common-ancestor-in-a-binary-search-tree-2.java
4,2,0,2,0,0,0,0,0,0,0,0,2,10,2,14,linear,efficient,lowest-common-ancestor-in-a-binary-search-tree-3.java
2,1,0,1,0,0,0,0,0,0,1,0,0,3,3,7,constant,efficient,lru-cache-implementation-1.java
5,0,0,4,0,0,0,0,0,0,0,1,0,7,5,19,exponential,inefficient,m-coloring-problem-1.java
3,1,0,2,0,0,0,0,0,0,0,0,2,7,2,8,quadratic,inefficient,majority-element-1.java
7,2,0,1,0,0,0,1,0,0,0,2,0,5,4,14,quadratic,inefficient,majority-element-2.java
5,3,0,2,0,0,0,0,0,0,0,0,0,7,4,13,linear,efficient,majority-element-3.java
2,1,0,1,0,0,0,0,0,1,0,0,0,4,2,8,linear,efficient,majority-element-4.java
3,1,0,1,1,0,0,0,1,0,0,0,0,4,2,11,linearithmic,efficient,majority-element-5.java
6,1,0,1,0,0,0,0,0,0,0,2,0,10,4,14,linearithmic,efficient,majority-element-6.java
2,0,0,1,0,0,0,0,0,0,0,2,0,5,2,6,exponential,inefficient,matrix-chain-multiplication-dp-8-1.java
2,0,0,2,0,0,0,1,0,0,0,2,0,5,3,11,polynomial,inefficient,matrix-chain-multiplication-dp-8-2.java
2,0,0,4,0,0,0,0,0,0,0,0,3,4,2,11,polynomial,inefficient,matrix-chain-multiplication-dp-8-3.java
2,1,0,8,0,0,0,2,0,0,0,0,2,6,2,17,quadratic,inefficient,maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix-1.java
2,0,0,6,0,0,0,3,0,0,0,0,2,9,2,16,quadratic,inefficient,maximum-size-sub-matrix-with-all-1s-in-a-binary-matrix-2.java
1,0,0,6,0,0,0,0,0,0,0,0,6,12,2,14,polynomial,inefficient,maximum-sum-rectangle-in-a-2d-matrix-dp-27-1.java
1,0,0,0,0,0,0,1,0,0,0,2,0,2,3,4,exponential,inefficient,maximum-sum-such-that-no-two-elements-are-adjacent-1.java
2,0,0,0,0,0,0,1,0,0,0,2,0,3,3,8,linear,efficient,maximum-sum-such-that-no-two-elements-are-adjacent-2.java
1,0,0,1,0,0,0,2,0,0,0,0,0,4,2,6,linear,efficient,maximum-sum-such-that-no-two-elements-are-adjacent-3.java
0,0,0,1,0,0,0,2,0,0,0,0,0,7,2,3,linear,efficient,maximum-sum-such-that-no-two-elements-are-adjacent-4.java
5,1,0,1,0,0,0,0,0,0,0,2,0,7,4,15,quadratic,inefficient,maximum-width-of-a-binary-tree-1.java
3,0,0,2,0,0,0,1,0,0,0,3,2,5,2,11,linear,efficient,maximum-width-of-a-binary-tree-2.java
3,1,0,1,0,0,0,0,0,0,0,2,0,9,5,11,linear,efficient,maximum-width-of-a-binary-tree-3.java
4,2,0,1,2,0,0,0,0,0,0,0,0,8,2,13,linear,efficient,median-of-two-sorted-arrays-1.java
1,1,0,1,0,0,0,0,2,0,0,0,0,7,2,4,linearithmic,efficient,median-of-two-sorted-arrays-2.java
3,3,0,3,0,0,0,0,0,0,0,0,0,12,3,11,logarithmic,efficient,median-of-two-sorted-arrays-3.java
2,1,0,3,0,0,0,0,0,0,0,0,0,10,4,10,linear,efficient,merge-one-array-of-size-n-into-another-one-of-size-mn-1.java
4,1,0,3,0,0,0,0,0,0,0,2,0,6,5,22,linearithmic,efficient,merge-sort-for-doubly-linked-list-1.java
2,1,0,6,0,0,0,0,3,0,0,2,0,13,4,14,linearithmic,efficient,merge-sort-1.java
4,1,0,3,0,0,0,0,0,0,0,2,0,14,8,20,linear,efficient,merge-two-balanced-binary-search-trees-1.java
7,3,0,3,0,0,0,0,0,0,0,2,0,11,7,28,linear,efficient,merge-two-balanced-binary-search-trees-2.java
10,2,0,3,0,0,0,0,0,0,0,2,3,7,6,34,linear,efficient,merge-two-bsts-with-limited-extra-space-1.java
1,1,0,4,0,0,0,0,0,0,0,0,3,5,2,11,linear,efficient,merge-two-bsts-with-limited-extra-space-2.java
8,1,0,2,2,0,0,0,0,0,0,2,0,8,6,27,linear,efficient,merge-two-bsts-with-limited-extra-space-3.java
3,2,0,0,0,0,0,1,0,0,0,3,0,1,3,8,polynomial,inefficient,min-cost-path-dp-6-1.java
4,1,0,1,0,0,0,1,0,0,0,3,0,3,4,12,quadratic,inefficient,min-cost-path-dp-6-2.java
1,1,0,4,0,0,0,1,0,0,0,0,2,3,3,8,quadratic,inefficient,min-cost-path-dp-6-3.java
0,0,0,4,0,0,0,2,0,0,0,0,2,5,2,9,linearithmic,efficient,min-cost-path-dp-6-4.java
3,0,0,4,0,0,0,0,0,0,0,1,2,10,6,11,quadratic,inefficient,minimize-cash-flow-among-given-set-friends-borrowed-money-1.java
2,0,0,2,0,0,0,1,0,0,0,0,2,6,2,7,quadratic,inefficient,minimum-number-platforms-required-railwaybus-station-1.java
1,1,0,2,0,1,0,0,1,0,0,0,0,9,4,10,linearithmic,efficient,minimum-number-platforms-required-railwaybus-station-2.java
3,0,0,1,0,0,0,0,2,0,0,0,0,5,2,8,linearithmic,efficient,minimum-number-platforms-required-railwaybus-station-3.java
0,0,0,4,0,0,0,2,0,0,0,0,0,10,2,9,linear,efficient,minimum-number-platforms-required-railwaybus-station-4.java
3,0,0,0,0,0,0,0,0,0,0,2,0,0,2,7,linear,efficient,multiply-two-numbers-without-using-multiply-division-bitwise-operators-and-no-loops-1.java
2,1,0,0,0,0,0,0,0,0,0,1,0,7,3,5,linear,efficient,multiply-two-numbers-without-using-multiply-division-bitwise-operators-and-no-loops-2.java
2,0,0,4,0,0,0,0,0,0,0,0,2,10,3,13,quadratic,inefficient,multiply-two-polynomials-2-1.java
8,1,0,6,0,0,0,0,0,0,0,1,2,6,5,28,exponential,inefficient,n-queen-problem-backtracking-3-1.java
4,0,0,3,0,0,0,0,0,0,0,1,2,4,4,16,exponential,inefficient,n-queen-problem-backtracking-3-2.java
5,0,0,5,0,0,0,0,0,0,0,1,2,13,5,22,exponential,inefficient,n-queen-problem-using-branch-and-bound-1.java
1,0,0,1,0,0,0,0,0,0,0,0,0,5,2,4,quadratic,inefficient,naive-algorithm-for-pattern-searching-1.java
0,0,0,3,0,0,0,1,0,0,0,0,2,4,2,5,quadratic,inefficient,nearly-sorted-algorithm-2.java
1,0,0,4,0,1,0,1,0,0,0,0,0,10,3,10,linearithmic,efficient,nearly-sorted-algorithm-3.java
2,0,0,1,0,0,0,2,1,0,0,2,0,6,3,7,linearithmic,efficient,nearly-sorted-algorithm-4.java
1,0,0,2,1,0,0,0,0,0,0,0,2,3,2,7,quadratic,inefficient,next-greater-element-1.java
5,2,0,3,1,0,0,0,0,0,0,0,2,6,5,20,linear,efficient,next-greater-element-2.java
0,0,0,4,0,0,0,0,0,1,0,0,2,8,2,7,linear,efficient,next-greater-element-3.java
1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,constant,efficient,next-higher-number-with-same-number-of-set-bits-1.java
2,1,0,1,0,0,0,0,0,0,0,2,0,3,3,5,linear,efficient,overlapping-subproblems-property-in-dynamic-programming-dp-1-2.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,2,2,linear,efficient,overlapping-subproblems-property-in-dynamic-programming-dp-1-3.java
2,0,0,2,0,0,0,1,0,0,0,2,0,4,3,10,exponential,inefficient,palindrome-partitioning-dp-17-1.java
2,2,0,4,0,0,0,1,0,0,0,0,3,5,2,11,polynomial,inefficient,palindrome-partitioning-dp-17-2.java
5,1,0,5,0,0,0,0,0,0,0,0,2,12,3,22,quadratic,inefficient,palindrome-partitioning-dp-17-3.java
1,0,0,3,0,0,0,0,0,0,0,0,2,5,3,7,polynomial,inefficient,pascal-triangle-1.java
1,1,0,2,0,0,0,0,0,0,0,0,2,4,2,5,quadratic,inefficient,pascal-triangle-2.java
0,0,0,2,0,0,0,0,0,0,0,0,2,4,2,4,quadratic,inefficient,pascal-triangle-3.java
5,2,0,3,0,0,0,0,0,0,0,1,0,8,4,13,linear,efficient,pattern-searching-using-trie-suffixes-1.java
6,1,0,1,0,0,0,0,0,0,0,2,0,9,4,17,logarithmic,efficient,persistent-segment-tree-set-1-introduction-1.java
2,1,0,1,0,0,0,0,0,0,0,0,0,10,2,8,linear,efficient,print-a-given-matrix-in-spiral-form-1.java
2,0,0,5,0,0,0,0,0,0,0,0,5,4,2,14,quadratic,inefficient,print-a-given-matrix-in-spiral-form-2.java
3,0,0,4,0,0,0,0,0,0,0,5,0,5,2,15,quadratic,inefficient,print-a-given-matrix-in-spiral-form-3.java
13,4,0,2,0,0,0,0,0,0,0,0,0,10,5,37,quadratic,inefficient,print-a-given-matrix-in-spiral-form-4.java
3,0,0,0,0,0,0,0,0,0,0,2,0,1,2,8,linear,efficient,print-ancestors-of-a-given-node-in-binary-tree-1.java
2,1,0,1,0,0,0,0,0,0,0,2,0,5,4,9,linear,efficient,print-elements-sorted-order-row-column-wise-sorted-matrix-1.java
0,0,0,3,0,0,0,0,1,0,0,0,2,6,2,6,polynomial,inefficient,print-elements-sorted-order-row-column-wise-sorted-matrix-2.java
4,1,0,3,0,0,0,0,0,0,0,1,0,11,7,18,polynomial,inefficient,print-elements-sorted-order-row-column-wise-sorted-matrix-3.java
2,0,0,0,0,0,0,0,0,0,0,2,0,1,2,5,linear,efficient,print-nodes-at-k-distance-from-root-1.java
3,0,0,3,0,0,0,0,0,0,0,0,3,8,2,11,linear,efficient,print-nodes-at-k-distance-from-root-2.java
3,0,0,4,1,0,0,0,0,0,0,0,4,6,2,11,polynomial,inefficient,print-unique-rows-1.java
4,1,0,3,0,0,0,0,0,0,0,2,0,6,6,19,quadratic,inefficient,print-unique-rows-2.java
4,1,0,2,0,0,0,0,0,0,0,1,0,5,5,11,quadratic,inefficient,print-unique-rows-3.java
1,0,0,2,0,0,0,0,0,0,1,0,2,5,2,5,quadratic,inefficient,print-unique-rows-4.java
2,0,0,3,0,0,0,2,0,0,0,0,0,11,4,12,linear,efficient,program-add-two-polynomials-1.java
3,1,0,2,0,0,0,0,0,0,0,3,0,3,4,11,linear,efficient,program-add-two-polynomials-2.java
1,1,0,4,0,0,0,0,0,0,0,0,0,10,2,12,linear,efficient,program-add-two-polynomials-3.java
1,0,0,2,0,0,0,0,0,0,0,0,0,6,4,5,linear,efficient,program-for-array-rotation-continued-reversal-algorithm-1.java
0,0,0,3,0,0,0,0,0,0,0,0,0,8,2,6,linear,efficient,program-for-array-rotation-continued-reversal-algorithm-2.java
1,0,0,1,0,0,0,0,0,0,0,0,0,3,2,5,linear,efficient,program-for-nth-fibonacci-number-1.java
1,0,0,0,0,0,0,0,0,0,0,2,0,1,2,3,exponential,inefficient,program-for-nth-fibonacci-number-2.java
0,0,0,1,0,0,0,0,0,0,0,0,0,3,2,3,linear,efficient,program-for-nth-fibonacci-number-3.java
3,0,0,0,0,0,0,0,0,0,0,1,0,7,4,6,logarithmic,efficient,program-for-nth-fibonacci-number-4.java
3,0,0,0,0,0,0,0,0,0,0,0,0,3,3,6,constant,efficient,queue-linked-list-implementation-1.java
1,0,0,2,0,0,0,0,0,0,0,0,0,2,3,8,linear,efficient,queue-using-stacks-1.java
3,0,0,1,0,0,0,0,0,0,0,1,0,2,5,12,constant,efficient,queue-using-stacks-2.java
3,1,0,0,0,0,0,0,0,0,0,1,0,2,5,12,constant,efficient,queue-using-stacks-3.java
3,0,0,3,0,0,0,0,0,0,0,1,0,9,7,14,linearithmic,efficient,quicksort-for-linked-list-2.java
5,0,0,4,1,0,0,0,0,0,0,0,2,9,2,15,linear,efficient,rabin-karp-algorithm-for-pattern-searching-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,1,linearithmic,efficient,randomized-algorithms-set-1-introduction-and-analysis-1.java
0,0,0,2,0,0,0,0,0,0,0,0,0,6,2,4,constant,efficient,randomized-algorithms-set-2-classification-and-applications-1.java
2,0,0,0,0,0,0,0,0,0,0,0,0,5,2,7,linearithmic,efficient,randomized-algorithms-set-2-classification-and-applications-2.java
1,0,0,2,0,0,0,0,0,0,0,0,0,9,2,7,linearithmic,efficient,randomized-algorithms-set-3-12-approximate-median-1.java
6,0,0,2,0,0,0,0,0,0,0,2,2,5,5,21,quadratic,inefficient,rat-in-a-maze-1.java
1,0,0,2,0,0,0,0,0,0,0,0,0,7,2,4,linear,efficient,reservoir-sampling-1.java
2,0,0,2,0,0,0,0,0,0,0,0,0,4,4,8,linear,efficient,reverse-a-doubly-linked-list-1.java
1,0,0,3,0,0,0,0,0,0,0,0,0,4,4,8,linear,efficient,reverse-a-doubly-linked-list-2.java
1,0,0,2,0,0,0,0,0,0,0,0,0,6,3,6,linear,efficient,reverse-a-doubly-linked-list-3.java
2,1,0,0,0,0,0,0,0,0,0,1,0,2,3,4,quadratic,inefficient,reverse-a-stack-using-recursion-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,2,constant,efficient,rotate-bits-of-an-integer-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,0,constant,efficient,rotate-bits-of-an-integer-2.java
11,0,0,0,0,0,1,0,0,0,0,2,0,6,4,25,logarithmic,efficient,search-an-element-in-a-sorted-and-pivoted-array-1.java
6,1,0,0,0,0,0,0,0,0,0,4,0,5,2,13,logarithmic,efficient,search-an-element-in-a-sorted-and-pivoted-array-2.java
2,1,0,1,0,0,0,0,0,0,0,0,0,5,2,9,linear,efficient,search-an-element-in-a-sorted-and-pivoted-array-3.java
6,1,0,2,0,0,0,0,0,0,0,2,0,10,7,28,linear,efficient,search-and-insertion-in-k-dimensional-tree-1.java
2,0,0,2,0,0,0,0,0,0,0,0,2,3,2,9,quadratic,inefficient,search-in-row-wise-and-column-wise-sorted-matrix-1.java
2,1,0,1,0,0,0,0,0,0,0,0,0,2,2,7,linear,efficient,search-in-row-wise-and-column-wise-sorted-matrix-2.java
1,0,0,2,0,0,0,0,0,0,0,0,2,4,2,8,quadratic,inefficient,search-in-row-wise-and-column-wise-sorted-matrix-3.java
3,0,0,0,0,0,1,0,0,0,0,2,0,3,2,7,logarithmic,efficient,search-insert-and-delete-in-a-sorted-array-1.java
1,0,0,3,0,0,0,0,0,0,0,0,0,7,2,6,linear,efficient,search-insert-and-delete-in-a-sorted-array-2.java
4,0,0,3,0,0,1,0,0,0,0,2,0,7,3,14,linear,efficient,search-insert-and-delete-in-a-sorted-array-3.java
2,1,0,1,0,0,0,0,0,0,0,0,0,5,2,5,linear,efficient,search-insert-and-delete-in-an-unsorted-array-1.java
1,0,0,2,0,0,0,0,0,0,0,0,0,4,2,5,constant,efficient,search-insert-and-delete-in-an-unsorted-array-2.java
0,0,0,3,0,0,0,0,0,0,0,0,0,6,2,3,linear,efficient,search-insert-and-delete-in-an-unsorted-array-3.java
2,0,0,4,0,0,0,0,0,0,0,0,0,7,3,11,linear,efficient,search-insert-and-delete-in-an-unsorted-array-4.java
11,1,0,0,0,0,0,0,0,0,0,2,0,4,7,27,logarithmic,efficient,searching-in-splay-tree-1.java
4,0,0,0,0,0,0,0,0,0,0,2,0,9,7,15,linear,efficient,segment-tree-range-minimum-query-1.java
7,0,0,0,0,0,0,0,0,0,0,2,0,9,7,21,linearithmic,efficient,segment-tree-sum-of-given-range-1.java
4,0,0,0,0,0,0,3,0,0,0,1,0,5,4,9,logarithmic,efficient,segment-tree-sum-of-given-range-2.java
2,0,0,4,0,0,0,0,0,0,0,0,2,7,2,9,linearithmic,efficient,sieve-of-eratosthenes-1.java
3,0,0,3,0,0,0,0,0,0,0,0,2,4,2,9,linearithmic,efficient,sieve-of-eratosthenes-2.java
1,0,0,2,0,0,0,0,0,0,0,0,2,4,2,5,quadratic,inefficient,sliding-window-maximum-maximum-of-all-subarrays-of-size-k-1.java
0,0,0,4,0,1,0,0,0,0,0,0,2,8,2,9,linear,efficient,sliding-window-maximum-maximum-of-all-subarrays-of-size-k-2.java
0,0,0,5,0,0,0,0,0,0,0,0,3,4,2,7,linear,efficient,sliding-window-maximum-maximum-of-all-subarrays-of-size-k-4.java
3,1,0,3,1,0,0,0,0,0,0,0,2,9,2,11,linear,efficient,snake-ladder-problem-2-1.java
4,0,0,3,0,0,0,1,0,1,0,1,0,8,3,16,linear,efficient,snake-ladder-problem-2-2.java
2,0,0,2,0,0,0,0,0,0,0,1,0,4,4,7,quadratic,inefficient,sort-a-stack-using-recursion-1.java
1,0,0,3,0,0,0,0,0,0,0,1,0,3,2,8,linearithmic,efficient,sort-a-stack-using-recursion-2.java
3,1,0,5,0,0,0,0,2,0,0,0,2,8,4,16,linearithmic,efficient,sort-elements-by-frequency-1.java
2,2,0,1,0,0,0,0,1,2,0,0,0,7,3,10,linearithmic,efficient,sort-elements-by-frequency-2.java
1,0,0,5,0,1,0,0,0,1,0,0,2,11,3,12,linearithmic,efficient,sort-elements-by-frequency-4.java
3,1,0,3,0,0,0,0,0,0,0,0,0,6,3,13,linear,efficient,sorted-insert-for-circular-linked-list-1.java
8,2,0,5,0,0,0,3,0,0,0,0,0,18,7,35,logarithmic,efficient,sparse-set-1.java
4,0,0,1,0,0,0,0,0,0,0,0,0,4,3,13,linear,efficient,split-a-circular-linked-list-into-two-halves-1.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,2,3,sublinear,efficient,square-root-of-a-perfect-square-1.java
0,0,0,1,0,0,0,0,0,0,0,0,0,3,2,3,sublinear,efficient,square-root-of-a-perfect-square-2.java
2,2,0,2,0,0,0,0,0,0,0,0,0,6,5,14,linear,efficient,stack-set-3-reverse-string-using-stack-1.java
0,0,0,2,0,0,0,0,0,0,0,0,0,3,2,3,linear,efficient,stack-set-3-reverse-string-using-stack-2.java
2,1,0,12,0,0,0,0,0,0,0,8,2,36,6,31,polynomial,inefficient,strassens-matrix-multiplication-2.java
1,1,0,14,0,0,0,0,0,0,0,7,2,45,6,22,quadratic,inefficient,strassens-matrix-multiplication-3.java
9,1,0,7,0,0,0,0,0,0,0,1,2,9,4,28,quadratic,inefficient,sudoku-backtracking-7-1.java
10,2,0,9,2,0,0,0,0,0,0,4,2,17,4,49,quadratic,inefficient,sudoku-backtracking-7-2.java
7,1,0,5,0,0,0,0,0,0,0,2,2,6,6,26,quadratic,inefficient,sudoku-backtracking-7-3.java
8,0,0,10,0,0,0,0,2,0,0,1,3,17,5,44,quadratic,inefficient,sudoku-backtracking-7-4.java
1,0,0,5,0,0,0,0,1,0,0,0,0,12,2,13,polynomial,efficient,suffix-array-set-1-introduction-1.java
2,1,0,3,0,0,0,0,1,0,0,0,0,13,3,13,linearithmic,efficient,suffix-array-set-1-introduction-2.java
2,1,0,7,0,0,0,0,2,0,0,0,3,16,4,18,linearithmic,efficient,suffix-array-set-2-a-nlognlogn-algorithm-1.java
0,0,0,3,0,0,0,0,1,0,0,0,0,7,1,6,quadratic,inefficient,suffix-array-set-2-a-nlognlogn-algorithm-2.java
0,0,0,0,0,0,0,0,0,0,0,0,0,5,2,1,constant,efficient,swap-bits-in-a-given-number-1.java
2,1,0,1,0,0,0,0,0,0,0,0,0,2,2,8,linear,efficient,swap-bits-in-a-given-number-3.java
0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,constant,efficient,swap-two-nibbles-byte-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,4,2,1,constant,efficient,swap-two-nibbles-byte-2.java
4,2,0,5,0,0,0,0,0,0,0,1,2,8,5,19,quadratic,inefficient,the-knights-tour-problem-1.java
0,0,0,2,0,0,0,0,0,0,0,0,2,5,3,3,quadratic,inefficient,the-stock-span-problem-1.java
0,0,0,2,0,0,0,0,0,0,0,0,2,5,3,3,linear,efficient,the-stock-span-problem-2.java
0,0,0,3,0,0,0,0,0,0,0,0,2,6,3,5,linear,efficient,the-stock-span-problem-3.java
1,1,0,3,0,0,0,0,0,0,0,0,2,8,3,7,linear,efficient,the-stock-span-problem-4.java
2,0,0,5,0,0,0,0,0,0,0,1,0,8,4,8,linear,efficient,topological-sorting-1.java
1,0,0,2,0,0,0,0,0,0,0,0,0,8,6,10,linear,efficient,total-number-of-possible-binary-search-trees-with-n-keys-1.java
2,1,0,1,0,0,0,0,0,0,0,0,0,4,3,8,linear,efficient,traversal-of-circular-linked-list-2.java
5,0,0,0,0,0,0,0,0,0,0,1,0,3,3,13,linear,efficient,traversal-of-circular-linked-list-3.java
1,0,0,0,0,0,0,0,0,0,0,2,0,1,2,2,linear,efficient,tree-traversals-inorder-preorder-and-postorder-1.java
1,0,0,0,0,0,0,0,0,0,0,2,0,1,2,2,linear,efficient,tree-traversals-inorder-preorder-and-postorder-2.java
1,0,0,0,0,0,0,0,0,0,0,2,0,1,2,2,linear,efficient,tree-traversals-inorder-preorder-and-postorder-3.java
11,3,0,4,0,0,0,0,0,0,0,1,0,12,5,27,linear,efficient,trie-delete-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,linear,efficient,trie-insert-and-search-1.java
6,4,0,4,0,0,0,0,0,0,0,0,0,12,3,14,linear,efficient,trie-insert-and-search-2.java
0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,constant,efficient,turn-off-the-rightmost-set-bit-1.java
0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,constant,efficient,turn-off-the-rightmost-set-bit-2.java
0,0,0,13,0,0,0,0,0,0,0,0,2,24,6,24,polynomial,inefficient,two-dimensional-binary-indexed-tree-or-fenwick-tree-1.java
3,0,0,5,0,0,0,0,0,0,0,0,0,10,6,15,quadratic,inefficient,union-and-intersection-of-two-linked-lists-1.java
9,7,0,2,0,0,0,0,0,0,0,0,0,6,3,30,linearithmic,efficient,union-and-intersection-of-two-linked-lists-2.java
6,3,0,8,0,0,0,0,0,1,1,0,0,21,7,35,linear,efficient,union-and-intersection-of-two-linked-lists-3.java
0,0,0,2,0,0,0,0,0,0,0,0,2,4,2,3,linear,efficient,unrolled-linked-list-set-1-introduction-1.java
2,1,0,1,0,0,0,0,0,0,0,2,0,5,3,6,linearithmic,efficient,vertical-order-traversal-of-binary-tree-using-map-1.java
3,1,0,2,0,0,0,0,0,0,0,2,2,7,3,9,linearithmic,efficient,vertical-order-traversal-of-binary-tree-using-map-2.java
3,0,0,1,0,0,0,0,0,0,0,2,0,4,3,6,linearithmic,efficient,vertical-order-traversal-of-binary-tree-using-map-3.java
6,0,0,3,0,0,0,0,0,1,0,0,2,10,2,12,linear,efficient,vertical-order-traversal-of-binary-tree-using-map-4.java
0,0,0,1,0,0,0,0,0,0,0,0,0,4,2,3,linear,efficient,write-a-c-program-to-calculate-powxn-1.java
2,0,0,0,0,0,0,0,0,0,0,1,0,2,2,5,linear,efficient,write-a-c-program-to-calculate-powxn-2.java
2,1,0,0,0,0,0,0,0,0,0,4,0,2,2,5,linear,efficient,write-a-c-program-to-calculate-powxn-3.java
3,2,0,0,0,0,0,0,0,0,0,1,0,3,2,8,logarithmic,efficient,write-a-c-program-to-calculate-powxn-5.java
0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,logarithmic,efficient,write-a-c-program-to-calculate-powxn-6.java
1,0,0,1,0,0,0,0,0,0,0,0,0,3,2,5,logarithmic,efficient,write-a-c-program-to-calculate-powxn-7.java
0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,1,constant,efficient,write-a-c-program-to-calculate-powxn-8.java
1,1,0,1,0,0,0,0,0,0,0,1,0,6,3,5,exponential,inefficient,write-a-c-program-to-print-all-permutations-of-a-given-string-1.java
7,1,0,1,0,0,0,0,0,0,0,0,0,8,4,20,linear,efficient,write-a-program-to-add-two-numbers-in-base-14
0,0,0,2,0,0,0,0,0,0,0,0,0,3,3,3,linear,efficient,write-a-program-to-reverse-an-array-or-string-1.java
1,0,0,1,0,0,0,0,0,0,0,1,0,3,3,3,linear,efficient,write-a-program-to-reverse-an-array-or-string-2.java
6,1,0,1,0,0,0,0,0,0,0,1,0,3,2,11,logarithmic,efficient,write-an-efficient-method-to-check-if-a-number-is-multiple-of-3-1.java
7,1,0,1,0,0,0,0,0,0,0,1,0,3,2,13,linearithmic,efficient,write-an-efficient-method-to-check-if-a-number-is-multiple-of-3-2.java
1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,3,constant,efficient,write-an-efficient-method-to-check-if-a-number-is-multiple-of-3-3.java
1,1,0,2,0,0,0,0,0,0,0,0,2,3,2,9,logarithmic,efficient,write-an-efficient-method-to-check-if-a-number-is-multiple-of-3-4.java
3,2,0,4,0,0,0,0,0,0,0,0,3,10,3,13,linear,efficient,z-algorithm-linear-time-pattern-searching-algorithm-1.java
